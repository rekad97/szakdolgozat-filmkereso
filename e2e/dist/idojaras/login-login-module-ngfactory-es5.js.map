{"version":3,"sources":["webpack:///src/app/login/login-routing.module.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.module.ts"],"names":["routes","path","component","LoginRoutingModule","LoginComponent","formBuilder","route","router","authService","loading","submitted","currentUserValue","navigate","loginForm","group","username","required","password","returnUrl","snapshot","queryParams","invalid","login","field","value","pipe","subscribe","data","error","console","log","controls","LoginModule"],"mappings":"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","file":"login-login-module-ngfactory-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule} from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: LoginComponent,\n  \n}\n]\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule { }\n","<h1>Login</h1>\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"login_board\">\n    <input type=\"text\" placeholder=\"Username\" id = \"username\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && field.username.errors }\" />\n    <div *ngIf=\"submitted && field.username.errors\" class=\"invalid-feedback\">\n      <div *ngIf=\"field.username.errors.required\">Username is required</div>\n    </div>\n    <input type=\"password\" placeholder=\"Password\" id = \"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && field.password.errors }\" />\n    <div *ngIf=\"submitted && field.password.errors\" class=\"invalid-feedback\">\n      <div *ngIf=\"field.password.errors.required\">Password is required</div>\n    </div>\n    <button id = \"login\" [disabled]=\"loading\" class=\"btn btn-primary\">\n      <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n      Login\n    </button>\n  </div>\n</form>\n\n","import { Component, OnInit } from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {Validators, FormGroup, FormBuilder} from '@angular/forms';\nimport {first} from 'rxjs/operators';\nimport { AuthService} from '../shared/auth_and_register/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n  ) {\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/home']);\n    }\n  }\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  get field() { return this.loginForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService.login(this.field.username.value, this.field.password.value)\n      .pipe(first())\n      .subscribe(data => {\n        this.router.navigate(['/home']);\n      },\n        error => {\n      console.log(error);\n        });\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login.component';\nimport { LoginRoutingModule } from './login-routing.module';\nimport { SharedModule } from 'app/shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule, \n    LoginRoutingModule,\n    SharedModule\n  ]\n})\nexport class LoginModule { }\n"]}